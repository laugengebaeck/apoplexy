\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{package} \PYG{n+nn}{de.lukasrost.apoplexy.game}

\PYG{k}{import} \PYG{n+nn}{android.annotation.SuppressLint}
\PYG{k}{import} \PYG{n+nn}{android.content.Context}
\PYG{k}{import} \PYG{n+nn}{android.graphics.*}
\PYG{k}{import} \PYG{n+nn}{android.support.v4.app.FragmentActivity}
\PYG{k}{import} \PYG{n+nn}{android.util.AttributeSet}
\PYG{k}{import} \PYG{n+nn}{android.view.GestureDetector}
\PYG{k}{import} \PYG{n+nn}{android.view.MotionEvent}
\PYG{k}{import} \PYG{n+nn}{android.view.View}
\PYG{k}{import} \PYG{n+nn}{de.lukasrost.apoplexy.BluetoothNoService}
\PYG{k}{import} \PYG{n+nn}{de.lukasrost.apoplexy.R}
\PYG{k}{import} \PYG{n+nn}{de.lukasrost.apoplexy.helpers.GamificationGraderHelper}
\PYG{k}{import} \PYG{n+nn}{java.util.*}

\PYG{c+c1}{// eigene View, beinhaltet das Minispiel}
\PYG{k}{class} \PYG{n+nc}{PlaneGameView} \PYG{p}{:} \PYG{n}{View} \PYG{p}{\PYGZob{}}
    \PYG{c+c1}{// Konstruktoren: zeichnet sich nicht selbst}
    \PYG{k}{constructor}\PYG{p}{(}\PYG{n}{context} \PYG{p}{:} \PYG{n}{Context}\PYG{p}{)} \PYG{p}{:} \PYG{k}{super}\PYG{p}{(}\PYG{n}{context}\PYG{p}{)\PYGZob{}}
        \PYG{n}{setWillNotDraw}\PYG{p}{(}\PYG{k}{false}\PYG{p}{)}
    \PYG{p}{\PYGZcb{}}
    \PYG{k}{constructor}\PYG{p}{(}\PYG{n}{context}\PYG{p}{:} \PYG{n}{Context}\PYG{p}{,} \PYG{n}{attributeSet}\PYG{p}{:} \PYG{n}{AttributeSet}\PYG{p}{)} \PYG{p}{:} \PYG{k}{super}\PYG{p}{(}\PYG{n}{context}\PYG{p}{,}\PYG{n}{attributeSet}\PYG{p}{)\PYGZob{}}
        \PYG{n}{setWillNotDraw}\PYG{p}{(}\PYG{k}{false}\PYG{p}{)}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// Bluetooth\PYGZhy{} und Gamification\PYGZhy{}Variablen}
    \PYG{k}{private} \PYG{k}{lateinit} \PYG{k}{var} \PYG{n+py}{bluetoothNoService} \PYG{p}{:} \PYG{n}{BluetoothNoService}
    \PYG{k}{private} \PYG{k}{var} \PYG{n+py}{bluetoothPercList} \PYG{p}{=} \PYG{n}{mutableListOf}\PYG{p}{\PYGZlt{}}\PYG{n}{Float}\PYG{p}{\PYGZgt{}()}
    \PYG{k}{private} \PYG{k}{var} \PYG{n+py}{inGame} \PYG{p}{=} \PYG{k}{false}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{graderHelper} \PYG{p}{=} \PYG{n}{GamificationGraderHelper}\PYG{p}{(}\PYG{n}{context}\PYG{p}{)}

    \PYG{c+c1}{// Höhe und Breite der View}
    \PYG{k}{private} \PYG{k}{var} \PYG{n+py}{effWidth} \PYG{p}{=} \PYG{n}{width} \PYG{p}{\PYGZhy{}} \PYG{p}{(}\PYG{n}{paddingLeft} \PYG{p}{+} \PYG{n}{paddingRight}\PYG{p}{)}
    \PYG{k}{private} \PYG{k}{var} \PYG{n+py}{effHeight} \PYG{p}{=} \PYG{n}{height} \PYG{p}{\PYGZhy{}} \PYG{p}{(}\PYG{n}{paddingTop} \PYG{p}{+} \PYG{n}{paddingBottom}\PYG{p}{)}

    \PYG{c+c1}{// Zufällige Berge als Queue}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{random} \PYG{p}{=} \PYG{n}{Random}\PYG{p}{()}
    \PYG{k}{private} \PYG{k}{var} \PYG{n+py}{randomHills} \PYG{p}{=} \PYG{n}{mutableListOf}\PYG{p}{\PYGZlt{}}\PYG{n}{Int}\PYG{p}{\PYGZgt{}()}

    \PYG{c+c1}{// Gesten\PYGZhy{}Detektor für Klicks}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{gestureListener} \PYG{p}{=}  \PYG{k}{object} \PYG{err}{: }\PYG{n+nc}{GestureDetector}\PYG{p}{.}\PYG{n}{SimpleOnGestureListener}\PYG{p}{()\PYGZob{}}
        \PYG{k}{override} \PYG{k}{fun} \PYG{n+nf}{onDown}\PYG{p}{(}\PYG{n}{e}\PYG{p}{:} \PYG{n}{MotionEvent}\PYG{p}{?):} \PYG{n}{Boolean} \PYG{p}{\PYGZob{}}
            \PYG{k}{return} \PYG{k}{true}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{gestureDetector} \PYG{p}{=} \PYG{n}{GestureDetector}\PYG{p}{(}\PYG{n}{context}\PYG{p}{,}\PYG{n}{gestureListener}\PYG{p}{)}

    \PYG{c+c1}{// Texte}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{pausedText} \PYG{p}{=} \PYG{l+s}{\PYGZdq{}Um das Spiel zu beginnen, berühre den Bildschirm.\PYGZdq{}}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{lostText} \PYG{p}{=} \PYG{l+s}{\PYGZdq{}Du bist gegen einen Berg gestoßen. Du verlierst!\PYGZdq{}}

    \PYG{c+c1}{// Hintergrund\PYGZhy{}Rechteck}
    \PYG{k}{private} \PYG{k}{var} \PYG{n+py}{backgroundRect} \PYG{p}{=} \PYG{n}{Rect}\PYG{p}{(}\PYG{n}{paddingLeft}\PYG{p}{,}\PYG{n}{paddingTop}\PYG{p}{,}\PYG{n}{effWidth}\PYG{p}{,}\PYG{n}{effHeight}\PYG{p}{)}
    \PYG{c+c1}{// Farben, Stile, Textgrößen}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{backgroundPaint} \PYG{p}{=} \PYG{n}{Paint}\PYG{p}{(}\PYG{l+m}{0}\PYG{p}{).}\PYG{n}{apply} \PYG{p}{\PYGZob{}}
        \PYG{n}{color} \PYG{p}{=} \PYG{n}{Color}\PYG{p}{.}\PYG{n}{BLUE}
        \PYG{n}{style} \PYG{p}{=} \PYG{n}{Paint}\PYG{p}{.}\PYG{n}{Style}\PYG{p}{.}\PYG{n}{FILL}
    \PYG{p}{\PYGZcb{}}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{hillPaint} \PYG{p}{=} \PYG{n}{Paint}\PYG{p}{(}\PYG{n}{Paint}\PYG{p}{.}\PYG{n}{ANTI\PYGZus{}ALIAS\PYGZus{}FLAG}\PYG{p}{).}\PYG{n}{apply} \PYG{p}{\PYGZob{}}
        \PYG{n}{color} \PYG{p}{=} \PYG{n}{Color}\PYG{p}{.}\PYG{n}{GREEN}
        \PYG{n}{style} \PYG{p}{=} \PYG{n}{Paint}\PYG{p}{.}\PYG{n}{Style}\PYG{p}{.}\PYG{n}{FILL}
    \PYG{p}{\PYGZcb{}}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{textPaint} \PYG{p}{=} \PYG{n}{Paint}\PYG{p}{(}\PYG{n}{Paint}\PYG{p}{.}\PYG{n}{ANTI\PYGZus{}ALIAS\PYGZus{}FLAG}\PYG{p}{).}\PYG{n}{apply} \PYG{p}{\PYGZob{}}
        \PYG{n}{style} \PYG{p}{=} \PYG{n}{Paint}\PYG{p}{.}\PYG{n}{Style}\PYG{p}{.}\PYG{n}{FILL}
        \PYG{n}{textSize} \PYG{p}{=} \PYG{l+m}{60f}
        \PYG{n}{color} \PYG{p}{=} \PYG{n}{Color}\PYG{p}{.}\PYG{n}{BLACK}
    \PYG{p}{\PYGZcb{}}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{planePaint} \PYG{p}{=} \PYG{n}{Paint}\PYG{p}{(}\PYG{n}{Paint}\PYG{p}{.}\PYG{n}{ANTI\PYGZus{}ALIAS\PYGZus{}FLAG}\PYG{p}{)}

    \PYG{c+c1}{// Flugzeug\PYGZhy{}Bild (nur halb so groß wie Originalbild)}
    \PYG{k}{private} \PYG{k}{var} \PYG{n+py}{opts} \PYG{p}{=} \PYG{n}{BitmapFactory}\PYG{p}{.}\PYG{n}{Options}\PYG{p}{().}\PYG{n}{apply} \PYG{p}{\PYGZob{}}
        \PYG{n}{inSampleSize} \PYG{p}{=} \PYG{l+m}{2}
    \PYG{p}{\PYGZcb{}}
    \PYG{k}{private} \PYG{k}{val} \PYG{n+py}{planeBitmap} \PYG{p}{=} \PYG{n}{BitmapFactory}\PYG{p}{.}\PYG{n}{decodeResource}\PYG{p}{(}\PYG{n}{context}\PYG{p}{.}\PYG{n}{resources}\PYG{p}{,} \PYG{n}{R}\PYG{p}{.}\PYG{n}{drawable}\PYG{p}{.}\PYG{n}{ic\PYGZus{}airplane}\PYG{p}{,}\PYG{n}{opts}\PYG{p}{)}

    \PYG{c+c1}{// Zeichnen der View}
    \PYG{k}{override} \PYG{k}{fun} \PYG{n+nf}{onDraw}\PYG{p}{(}\PYG{n}{canvas}\PYG{p}{:} \PYG{n}{Canvas}\PYG{p}{?)} \PYG{p}{\PYGZob{}}
        \PYG{k}{super}\PYG{p}{.}\PYG{n}{onDraw}\PYG{p}{(}\PYG{n}{canvas}\PYG{p}{)}
        \PYG{k}{if}\PYG{p}{(}\PYG{n}{inGame}\PYG{p}{)} \PYG{p}{\PYGZob{}}
            \PYG{c+c1}{// im Spiel}
            \PYG{n}{canvas}\PYG{o}{?.}\PYG{n}{apply} \PYG{p}{\PYGZob{}}
                \PYG{n}{bluetoothPercList}\PYG{p}{.}\PYG{n}{add}\PYG{p}{(}\PYG{n}{bluetoothNoService}\PYG{p}{.}\PYG{n}{getCurrentValuePercent}\PYG{p}{())}
                \PYG{c+c1}{// Verschiebung des Flugzeugs nach oben}
                \PYG{k}{val} \PYG{n+py}{verschieb} \PYG{p}{=} \PYG{l+m}{20}
                \PYG{c+c1}{// obere linke Ecke des Flugzeugs durch  *Magie* bestimmen}
                \PYG{k}{val} \PYG{n+py}{top} \PYG{p}{=} \PYG{n}{paddingTop} \PYG{p}{+} \PYG{n}{effHeight} \PYG{p}{\PYGZhy{}} \PYG{p}{(} \PYG{n}{effHeight} \PYG{p}{*} \PYG{p}{(}\PYG{n}{bluetoothPercList}\PYG{p}{[}\PYG{n}{bluetoothPercList}\PYG{p}{.}\PYG{n}{size}\PYG{p}{\PYGZhy{}}\PYG{l+m}{1}\PYG{p}{]} \PYG{p}{+} \PYG{n}{verschieb}\PYG{p}{)} \PYG{p}{/} \PYG{l+m}{100} \PYG{p}{)}
                \PYG{k}{val} \PYG{n+py}{left} \PYG{p}{=} \PYG{n}{paddingLeft} \PYG{p}{+} \PYG{n}{effWidth}\PYG{p}{/}\PYG{l+m}{2} \PYG{p}{\PYGZhy{}} \PYG{n}{planeBitmap}\PYG{p}{.}\PYG{n}{width}

                \PYG{c+c1}{// Kollision mit Hügel vor Flugzeug \PYGZhy{}\PYGZgt{} verloren}
                \PYG{k}{if}\PYG{p}{(}\PYG{n}{top} \PYG{p}{+} \PYG{n}{planeBitmap}\PYG{p}{.}\PYG{n}{height} \PYG{p}{\PYGZgt{}=} \PYG{n}{paddingTop} \PYG{p}{+} \PYG{n}{effHeight} \PYG{p}{\PYGZhy{}} \PYG{n}{randomHills}\PYG{p}{[}\PYG{n}{randomHills}\PYG{p}{.}\PYG{n}{size}\PYG{p}{/}\PYG{l+m}{2}\PYG{p}{])\PYGZob{}}
                    \PYG{n}{drawText}\PYG{p}{(}\PYG{n}{lostText}\PYG{p}{,}\PYG{l+m}{50f}\PYG{p}{,(}\PYG{n}{effHeight}\PYG{p}{/}\PYG{l+m}{2}\PYG{p}{).}\PYG{n}{toFloat}\PYG{p}{(),}\PYG{n}{textPaint}\PYG{p}{)}
                    \PYG{n}{Thread}\PYG{p}{.}\PYG{n}{sleep}\PYG{p}{(}\PYG{l+m}{2500}\PYG{p}{)}
                    \PYG{c+c1}{// Spiel beenden}
                    \PYG{n}{handleTap}\PYG{p}{()}
                \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{p}{\PYGZob{}}
                    \PYG{c+c1}{// Spiellandschaft (Flugzeug, Himmel, Berge) zeichnen}
                    \PYG{n}{drawRect}\PYG{p}{(}\PYG{n}{backgroundRect}\PYG{p}{,} \PYG{n}{backgroundPaint}\PYG{p}{)}
                    \PYG{n}{drawHills}\PYG{p}{(}\PYG{k}{this}\PYG{p}{)}
                    \PYG{n}{drawBitmap}\PYG{p}{(}\PYG{n}{planeBitmap}\PYG{p}{,} \PYG{n}{left}\PYG{p}{.}\PYG{n}{toFloat}\PYG{p}{(),} \PYG{n}{top}\PYG{p}{,} \PYG{n}{planePaint}\PYG{p}{)}
                \PYG{p}{\PYGZcb{}}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{p}{\PYGZob{}}
            \PYG{c+c1}{// außerhalb des Spiels \PYGZhy{}\PYGZgt{} Text anzeigen}
            \PYG{n}{canvas}\PYG{o}{?.}\PYG{n}{apply} \PYG{p}{\PYGZob{}}
                \PYG{n}{drawText}\PYG{p}{(}\PYG{n}{pausedText}\PYG{p}{,}\PYG{l+m}{50f}\PYG{p}{,(}\PYG{n}{effHeight}\PYG{p}{/}\PYG{l+m}{2}\PYG{p}{).}\PYG{n}{toFloat}\PYG{p}{(),}\PYG{n}{textPaint}\PYG{p}{)}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// Berge zeichen}
    \PYG{k}{private} \PYG{k}{fun} \PYG{n+nf}{drawHills}\PYG{p}{(}\PYG{n}{canvas}\PYG{p}{:} \PYG{n}{Canvas}\PYG{p}{)\PYGZob{}}
        \PYG{c+c1}{// Höhe des nächsten Bergs zufällig bestimmen}
        \PYG{k}{val} \PYG{n+py}{k} \PYG{p}{=} \PYG{n}{random}\PYG{p}{.}\PYG{n}{nextInt}\PYG{p}{(} \PYG{n}{effHeight}\PYG{p}{)} \PYG{p}{\PYGZhy{}} \PYG{n}{effHeight} \PYG{p}{/} \PYG{l+m}{5}
        \PYG{n}{randomHills}\PYG{p}{.}\PYG{n}{add}\PYG{p}{(}\PYG{k}{if} \PYG{p}{(}\PYG{n}{k} \PYG{p}{\PYGZlt{}} \PYG{l+m}{0}\PYG{p}{)} \PYG{n}{effHeight} \PYG{p}{/} \PYG{l+m}{4} \PYG{k}{else} \PYG{n}{k}\PYG{p}{)}
        \PYG{n}{randomHills}\PYG{p}{.}\PYG{n}{removeAt}\PYG{p}{(}\PYG{l+m}{0}\PYG{p}{)}

        \PYG{c+c1}{// Berge im Abstand von 100 Pixel zeichnen}
        \PYG{k}{val} \PYG{n+py}{p} \PYG{p}{=} \PYG{n}{Path}\PYG{p}{()}
        \PYG{n}{canvas}\PYG{p}{.}\PYG{n}{apply} \PYG{p}{\PYGZob{}}
            \PYG{k}{var} \PYG{n+py}{offset} \PYG{p}{=} \PYG{l+m}{0}
            \PYG{k}{for} \PYG{p}{(}\PYG{n}{hill} \PYG{k}{in} \PYG{n}{randomHills}\PYG{p}{)\PYGZob{}}
                \PYG{n}{p}\PYG{p}{.}\PYG{n}{lineTo}\PYG{p}{((}\PYG{n}{paddingLeft}\PYG{p}{+}\PYG{n}{offset}\PYG{p}{).}\PYG{n}{toFloat}\PYG{p}{(),(}\PYG{n}{paddingTop}\PYG{p}{+} \PYG{n}{effHeight} \PYG{p}{\PYGZhy{}} \PYG{n}{hill}\PYG{p}{).}\PYG{n}{toFloat}\PYG{p}{())}
                \PYG{n}{offset} \PYG{p}{+=} \PYG{l+m}{100}
            \PYG{p}{\PYGZcb{}}
            \PYG{n}{p}\PYG{p}{.}\PYG{n}{lineTo}\PYG{p}{((}\PYG{n}{paddingLeft} \PYG{p}{+} \PYG{n}{effWidth}\PYG{p}{).}\PYG{n}{toFloat}\PYG{p}{(),(}\PYG{n}{paddingTop}\PYG{p}{+}\PYG{n}{effHeight}\PYG{p}{).}\PYG{n}{toFloat}\PYG{p}{())}
            \PYG{n}{p}\PYG{p}{.}\PYG{n}{lineTo}\PYG{p}{(}\PYG{n}{paddingLeft}\PYG{p}{.}\PYG{n}{toFloat}\PYG{p}{(),(}\PYG{n}{paddingTop}\PYG{p}{+}\PYG{n}{effHeight}\PYG{p}{).}\PYG{n}{toFloat}\PYG{p}{())}
            \PYG{n}{p}\PYG{p}{.}\PYG{n}{close}\PYG{p}{()}
            \PYG{n}{drawPath}\PYG{p}{(}\PYG{n}{p}\PYG{p}{,}\PYG{n}{hillPaint}\PYG{p}{)}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// Bildschirmgröße verändert \PYGZhy{}\PYGZgt{} abhängige Werte anpassen}
    \PYG{k}{override} \PYG{k}{fun} \PYG{n+nf}{onSizeChanged}\PYG{p}{(}\PYG{n}{w}\PYG{p}{:} \PYG{n}{Int}\PYG{p}{,} \PYG{n}{h}\PYG{p}{:} \PYG{n}{Int}\PYG{p}{,} \PYG{n}{oldw}\PYG{p}{:} \PYG{n}{Int}\PYG{p}{,} \PYG{n}{oldh}\PYG{p}{:} \PYG{n}{Int}\PYG{p}{)} \PYG{p}{\PYGZob{}}
        \PYG{n}{effWidth} \PYG{p}{=} \PYG{n}{width} \PYG{p}{\PYGZhy{}} \PYG{p}{(}\PYG{n}{paddingLeft} \PYG{p}{+} \PYG{n}{paddingRight}\PYG{p}{)}
        \PYG{n}{effHeight} \PYG{p}{=} \PYG{n}{height} \PYG{p}{\PYGZhy{}} \PYG{p}{(}\PYG{n}{paddingTop} \PYG{p}{+} \PYG{n}{paddingBottom}\PYG{p}{)}
        \PYG{n}{backgroundRect} \PYG{p}{=} \PYG{n}{Rect}\PYG{p}{(}\PYG{n}{paddingLeft}\PYG{p}{,}\PYG{n}{paddingTop}\PYG{p}{,}\PYG{n}{effWidth}\PYG{p}{,}\PYG{n}{effHeight}\PYG{p}{)}
        \PYG{n}{genRandomHills}\PYG{p}{()}
        \PYG{k}{super}\PYG{p}{.}\PYG{n}{onSizeChanged}\PYG{p}{(}\PYG{n}{w}\PYG{p}{,} \PYG{n}{h}\PYG{p}{,} \PYG{n}{oldw}\PYG{p}{,} \PYG{n}{oldh}\PYG{p}{)}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// neue initiale Berge\PYGZhy{}Liste zufällig generieren}
    \PYG{k}{private} \PYG{k}{fun} \PYG{n+nf}{genRandomHills}\PYG{p}{()\PYGZob{}}
        \PYG{n}{randomHills} \PYG{p}{=} \PYG{n}{mutableListOf}\PYG{p}{\PYGZlt{}}\PYG{n}{Int}\PYG{p}{\PYGZgt{}().}\PYG{n}{apply} \PYG{p}{\PYGZob{}}
            \PYG{k}{for} \PYG{p}{(}\PYG{n}{i} \PYG{k}{in} \PYG{l+m}{0.}\PYG{p}{.}\PYG{n}{effWidth}\PYG{p}{/}\PYG{l+m}{100}\PYG{p}{)\PYGZob{}}
                \PYG{k}{val} \PYG{n+py}{k} \PYG{p}{=} \PYG{n}{random}\PYG{p}{.}\PYG{n}{nextInt}\PYG{p}{(} \PYG{n}{effHeight}\PYG{p}{)} \PYG{p}{\PYGZhy{}} \PYG{n}{effHeight} \PYG{p}{/} \PYG{l+m}{5}
                \PYG{n}{add}\PYG{p}{(}\PYG{k}{if} \PYG{p}{(}\PYG{n}{k} \PYG{p}{\PYGZlt{}} \PYG{l+m}{0}\PYG{p}{)} \PYG{n}{effHeight} \PYG{p}{/} \PYG{l+m}{4} \PYG{k}{else} \PYG{n}{k}\PYG{p}{)}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// diese und nächste Funktion setzen Höhe und Breite der View bei Anforderung durch System}
    \PYG{k}{override} \PYG{k}{fun} \PYG{n+nf}{onMeasure}\PYG{p}{(}\PYG{n}{widthMeasureSpec}\PYG{p}{:} \PYG{n}{Int}\PYG{p}{,} \PYG{n}{heightMeasureSpec}\PYG{p}{:} \PYG{n}{Int}\PYG{p}{)} \PYG{p}{\PYGZob{}}

        \PYG{k}{val} \PYG{n+py}{desiredWidth} \PYG{p}{=} \PYG{n}{suggestedMinimumWidth} \PYG{p}{+} \PYG{n}{paddingLeft} \PYG{p}{+} \PYG{n}{paddingRight}
        \PYG{k}{val} \PYG{n+py}{desiredHeight} \PYG{p}{=} \PYG{n}{suggestedMinimumHeight} \PYG{p}{+} \PYG{n}{paddingTop} \PYG{p}{+} \PYG{n}{paddingBottom}

        \PYG{n}{setMeasuredDimension}\PYG{p}{(}\PYG{n}{measureDimension}\PYG{p}{(}\PYG{n}{desiredWidth}\PYG{p}{,} \PYG{n}{widthMeasureSpec}\PYG{p}{),}
                \PYG{n}{measureDimension}\PYG{p}{(}\PYG{n}{desiredHeight}\PYG{p}{,} \PYG{n}{heightMeasureSpec}\PYG{p}{))}
    \PYG{p}{\PYGZcb{}}

    \PYG{k}{private} \PYG{k}{fun} \PYG{n+nf}{measureDimension}\PYG{p}{(}\PYG{n}{desiredSize}\PYG{p}{:} \PYG{n}{Int}\PYG{p}{,} \PYG{n}{measureSpec}\PYG{p}{:} \PYG{n}{Int}\PYG{p}{):} \PYG{n}{Int} \PYG{p}{\PYGZob{}}
        \PYG{k}{var} \PYG{n+py}{result}\PYG{p}{:} \PYG{n}{Int}
        \PYG{k}{val} \PYG{n+py}{specMode} \PYG{p}{=} \PYG{n}{View}\PYG{p}{.}\PYG{n}{MeasureSpec}\PYG{p}{.}\PYG{n}{getMode}\PYG{p}{(}\PYG{n}{measureSpec}\PYG{p}{)}
        \PYG{k}{val} \PYG{n+py}{specSize} \PYG{p}{=} \PYG{n}{View}\PYG{p}{.}\PYG{n}{MeasureSpec}\PYG{p}{.}\PYG{n}{getSize}\PYG{p}{(}\PYG{n}{measureSpec}\PYG{p}{)}

        \PYG{k}{if} \PYG{p}{(}\PYG{n}{specMode} \PYG{p}{==} \PYG{n}{View}\PYG{p}{.}\PYG{n}{MeasureSpec}\PYG{p}{.}\PYG{n}{EXACTLY}\PYG{p}{)} \PYG{p}{\PYGZob{}}
            \PYG{n}{result} \PYG{p}{=} \PYG{n}{specSize}
        \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{p}{\PYGZob{}}
            \PYG{n}{result} \PYG{p}{=} \PYG{n}{desiredSize}
            \PYG{k}{if} \PYG{p}{(}\PYG{n}{specMode} \PYG{p}{==} \PYG{n}{View}\PYG{p}{.}\PYG{n}{MeasureSpec}\PYG{p}{.}\PYG{n}{AT\PYGZus{}MOST}\PYG{p}{)} \PYG{p}{\PYGZob{}}
                \PYG{n}{result} \PYG{p}{=} \PYG{n}{Math}\PYG{p}{.}\PYG{n}{min}\PYG{p}{(}\PYG{n}{result}\PYG{p}{,} \PYG{n}{specSize}\PYG{p}{)}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}
        \PYG{k}{return} \PYG{n}{result}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// bei Klick Spiel starten bzw. beenden}
    \PYG{n}{@SuppressLint}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}ClickableViewAccessibility\PYGZdq{}}\PYG{p}{)}
    \PYG{k}{override} \PYG{k}{fun} \PYG{n+nf}{onTouchEvent}\PYG{p}{(}\PYG{n}{event}\PYG{p}{:} \PYG{n}{MotionEvent}\PYG{p}{?):} \PYG{n}{Boolean} \PYG{p}{\PYGZob{}}
        \PYG{k}{return} \PYG{n}{gestureDetector}\PYG{p}{.}\PYG{n}{onTouchEvent}\PYG{p}{(}\PYG{n}{event}\PYG{p}{).}\PYG{n}{let} \PYG{p}{\PYGZob{}}
            \PYG{k}{if}\PYG{p}{(}\PYG{n}{it}\PYG{p}{)\PYGZob{}}
                \PYG{n}{handleTap}\PYG{p}{()}
                \PYG{k}{true}
            \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{k}{false}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// Spiel starten bzw. beenden}
    \PYG{k}{private} \PYG{k}{fun} \PYG{n+nf}{handleTap}\PYG{p}{()\PYGZob{}}
        \PYG{n}{inGame} \PYG{p}{=} \PYG{p}{!}\PYG{n}{inGame}
        \PYG{k}{if}\PYG{p}{(!}\PYG{n}{inGame}\PYG{p}{)} \PYG{p}{\PYGZob{}}
            \PYG{c+c1}{// Beenden}
            \PYG{c+c1}{// Gamification durchführen}
            \PYG{n}{graderHelper}\PYG{p}{.}\PYG{n}{gradeForGame}\PYG{p}{(}\PYG{n}{bluetoothPercList}\PYG{p}{.}\PYG{n}{size}\PYG{p}{,} \PYG{n}{bluetoothPercList}\PYG{p}{)}
            \PYG{k}{val} \PYG{n+py}{fragment} \PYG{p}{=} \PYG{n}{graderHelper}\PYG{p}{.}\PYG{n}{checkBadgesForCompletion}\PYG{p}{(}\PYG{n}{bluetoothPercList}\PYG{p}{)}
            \PYG{k}{val} \PYG{n+py}{activity} \PYG{p}{=} \PYG{n}{context} \PYG{k}{as} \PYG{n}{FragmentActivity}
            \PYG{n}{activity}\PYG{p}{.}\PYG{n}{runOnUiThread} \PYG{p}{\PYGZob{}} \PYG{n}{fragment}\PYG{o}{?.}\PYG{n}{show}\PYG{p}{(}\PYG{n}{activity}\PYG{p}{.}\PYG{n}{supportFragmentManager}\PYG{p}{,}\PYG{l+s}{\PYGZdq{}badgecompleted\PYGZdq{}}\PYG{p}{)} \PYG{p}{\PYGZcb{}}

            \PYG{c+c1}{// Bluetooth\PYGZhy{} und Berge\PYGZhy{}Listen leeren}
            \PYG{n}{bluetoothPercList} \PYG{p}{=} \PYG{n}{mutableListOf}\PYG{p}{()}
            \PYG{n}{randomHills} \PYG{p}{=} \PYG{n}{mutableListOf}\PYG{p}{()}
        \PYG{p}{\PYGZcb{}} \PYG{k}{else} \PYG{p}{\PYGZob{}}
            \PYG{c+c1}{// Starten \PYGZhy{}\PYGZgt{} Berge generieren}
            \PYG{n}{genRandomHills}\PYG{p}{()}
        \PYG{p}{\PYGZcb{}}
        \PYG{c+c1}{// View neu zeichnen}
        \PYG{n}{invalidate}\PYG{p}{()}
    \PYG{p}{\PYGZcb{}}

    \PYG{c+c1}{// Bluetooth\PYGZhy{}Service setzen}
    \PYG{k}{fun} \PYG{n+nf}{setBluetoothNoService}\PYG{p}{(}\PYG{n}{bb} \PYG{p}{:} \PYG{n}{BluetoothNoService}\PYG{p}{)\PYGZob{}}
        \PYG{n}{bluetoothNoService} \PYG{p}{=} \PYG{n}{bb}
        \PYG{n}{bluetoothNoService}\PYG{p}{.}\PYG{n}{startReading}\PYG{p}{()}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
